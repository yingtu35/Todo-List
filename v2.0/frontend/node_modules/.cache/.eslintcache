[{"H:\\Computer Science\\Side Project\\todo-list\\v2.0\\frontend\\src\\index.js":"1","H:\\Computer Science\\Side Project\\todo-list\\v2.0\\frontend\\src\\reportWebVitals.js":"2","H:\\Computer Science\\Side Project\\todo-list\\v2.0\\frontend\\src\\App.js":"3","H:\\Computer Science\\Side Project\\todo-list\\v2.0\\frontend\\src\\components\\Title.jsx":"4","H:\\Computer Science\\Side Project\\todo-list\\v2.0\\frontend\\src\\components\\HomePage.jsx":"5","H:\\Computer Science\\Side Project\\todo-list\\v2.0\\frontend\\src\\components\\Todos.jsx":"6","H:\\Computer Science\\Side Project\\todo-list\\v2.0\\frontend\\src\\components\\Footer.jsx":"7","H:\\Computer Science\\Side Project\\todo-list\\v2.0\\frontend\\src\\components\\SignUp.jsx":"8","H:\\Computer Science\\Side Project\\todo-list\\v2.0\\frontend\\src\\components\\Header.jsx":"9"},{"size":581,"mtime":1674908780000,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":1674906308000,"results":"12","hashOfConfig":"11"},{"size":1448,"mtime":1675684492000,"results":"13","hashOfConfig":"11"},{"size":696,"mtime":1675418172000,"results":"14","hashOfConfig":"11"},{"size":4322,"mtime":1675684486000,"results":"15","hashOfConfig":"11"},{"size":5594,"mtime":1675434770000,"results":"16","hashOfConfig":"11"},{"size":1545,"mtime":1675408016000,"results":"17","hashOfConfig":"11"},{"size":5217,"mtime":1675684474000,"results":"18","hashOfConfig":"11"},{"size":3029,"mtime":1675679662000,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"3dq7m6",{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"23"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"23"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"H:\\Computer Science\\Side Project\\todo-list\\v2.0\\frontend\\src\\index.js",[],[],[],"H:\\Computer Science\\Side Project\\todo-list\\v2.0\\frontend\\src\\reportWebVitals.js",[],[],"H:\\Computer Science\\Side Project\\todo-list\\v2.0\\frontend\\src\\App.js",["50"],[],"H:\\Computer Science\\Side Project\\todo-list\\v2.0\\frontend\\src\\components\\Title.jsx",["51","52","53","54","55"],[],"import React from \"react\"\r\nimport { Box, Heading, useColorMode, Stack, Text, Switch } from \"@chakra-ui/react\"\r\n\r\nfunction Title() {\r\n    const { colorMode, toggleColorMode } = useColorMode();\r\n\r\n    return (\r\n        <Box p={1} mb={2}  textAlign=\"center\">\r\n            <Heading as=\"h1\" size='2xl' noOfLines={1}>\r\n                Todo List\r\n            </Heading>\r\n            {/* <Stack direction=\"row\" spacing={3} justifyContent=\"center\" mt={2}>\r\n                <Text as='b'>Light</Text>\r\n                <Switch isChecked={colorMode === 'dark'} onChange={toggleColorMode} />\r\n                <Text as='b'>Dark</Text>\r\n            </Stack> */}\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default Title","H:\\Computer Science\\Side Project\\todo-list\\v2.0\\frontend\\src\\components\\HomePage.jsx",["56"],[],"H:\\Computer Science\\Side Project\\todo-list\\v2.0\\frontend\\src\\components\\Todos.jsx",["57","58","59","60","61","62","63","64"],[],"import React, { useRef } from \"react\"\r\nimport { Box, Input, Button, InputGroup, Stack, Text, ButtonGroup, useDisclosure, FormControl, FormLabel, FormHelperText, FormErrorMessage } from \"@chakra-ui/react\"\r\nimport { Modal, ModalOverlay, ModalHeader, ModalCloseButton, ModalContent, ModalBody, ModalFooter} from \"@chakra-ui/react\"\r\nimport { useState, useEffect } from \"react\"\r\nimport { useNavigate } from \"react-router-dom\"\r\n\r\nconst TodosContext = React.createContext({\r\n    todos: [],\r\n    getCurrentTodos: () => {}\r\n})\r\n\r\nfunction Addtodo(props) {\r\n    const [userId, setUserId] = useState(props.userId || null);\r\n    const [item, setItem] = useState(\"\")\r\n    const [isError, setIsError] = useState(false);\r\n    const {todos, getCurrentTodos} = React.useContext(TodosContext)\r\n\r\n    function handleInput(event) {\r\n        setItem(event.target.value);\r\n        setIsError(false);\r\n    }\r\n    async function handleSubmit() {\r\n        if (item) {\r\n            const requestOptions = {\r\n                method: \"POST\",\r\n                headers: {\"Content-Type\": \"application/json\"},\r\n                body: JSON.stringify({\r\n                    \"item\": item,\r\n                    \"owner_id\": userId,\r\n                }),\r\n            }\r\n\r\n            await fetch(`http://localhost:8000/items/user/${userId}`, requestOptions);\r\n            getCurrentTodos();\r\n            setItem(\"\");\r\n        }\r\n        else {\r\n            setIsError(true);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <FormControl>\r\n            <FormLabel>Todo</FormLabel>\r\n            <InputGroup>\r\n                <Input \r\n                    type=\"text\"\r\n                    placeholder=\"Enter here\"\r\n                    value={item}\r\n                    autoFocus={true}\r\n                    onChange={handleInput}\r\n                />\r\n                <Button colorScheme=\"blue\" onClick={handleSubmit}>Submit</Button>\r\n            </InputGroup>\r\n            {isError? (\r\n                <FormHelperText>\r\n                    Input is required.\r\n                </FormHelperText>\r\n            )\r\n            : (\r\n                <FormHelperText>\r\n                    Write down what to do.\r\n                </FormHelperText>\r\n            )\r\n            }\r\n            \r\n        </FormControl>\r\n            \r\n    )\r\n}\r\n\r\nfunction Todo(props){\r\n    const [id, setId] = useState(props.id || null);\r\n    const [item, setItem] = useState(props.item || null);\r\n    const [userId, setUserId] = useState(props.userId || null);\r\n    const {todos, getCurrentTodos} = React.useContext(TodosContext);\r\n    const { isOpen, onOpen, onClose } = useDisclosure();\r\n    const inputRef = useRef();\r\n\r\n    async function handleUpdate(){\r\n        if (inputRef.current.value) {\r\n            const requestOptions = {\r\n                method: \"PUT\",\r\n                headers: {\"Content-Type\": \"application/json\"},\r\n                body: JSON.stringify({\r\n                    \"item\": inputRef.current.value,\r\n                    \"owner_id\": userId\r\n                }),\r\n            }\r\n\r\n            await fetch(`http://localhost:8000/items/${id}`, requestOptions);\r\n            getCurrentTodos();\r\n            onClose();\r\n        }\r\n    }\r\n\r\n    async function handleDelete(){\r\n        const requestOptions = {\r\n            method: \"DELETE\",\r\n            headers: {\"Content-Type\": \"application/json\"},\r\n            body: JSON.stringify({\r\n                \"owner_id\": userId\r\n            }),\r\n        }\r\n\r\n        await fetch(`http://localhost:8000/items/${id}`, requestOptions);\r\n        getCurrentTodos();\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        setId(props.id);\r\n        setItem(props.item);\r\n    }, [props.id, props.item])\r\n\r\n    return (\r\n        <Box p={1}>\r\n            <Text fontSize='md'>{item}</Text>\r\n            <ButtonGroup gap={4}>\r\n                <Button colorScheme='blue' size='sm' onClick={onOpen}>Edit</Button>\r\n                <Button colorScheme='red' size='sm' onClick={handleDelete}>Delete</Button>\r\n            </ButtonGroup>\r\n\r\n            <Modal isOpen={isOpen} onClose={onClose}>\r\n                <ModalOverlay />\r\n                <ModalContent>\r\n                    <ModalHeader>Update Todo Item</ModalHeader>\r\n                    <ModalCloseButton />\r\n                    <ModalBody>\r\n                        <Input \r\n                            placeholder=\"Enter here\"\r\n                            defaultValue={item}\r\n                            ref={inputRef}\r\n                            autoFocus={true}\r\n                        />\r\n                    </ModalBody>\r\n\r\n                    <ModalFooter>\r\n                        <Button colorScheme=\"blue\" onClick={handleUpdate}>Update</Button>\r\n                    </ModalFooter>\r\n                </ModalContent>\r\n            </Modal>\r\n        </Box>\r\n    )\r\n}\r\n\r\nfunction Todos(props){\r\n\r\n    const [todos, setTodos] = useState([]);\r\n    const [userId, setUserId] = useState(props.userId || -1);\r\n\r\n    async function getCurrentTodos() {\r\n        const response = await fetch(`http://localhost:8000/items/user/${userId}`);\r\n        const data = await response.json();\r\n        setTodos(data.todos);\r\n    }\r\n\r\n    useEffect(() => {\r\n      getCurrentTodos()\r\n    }, [])\r\n\r\n    return (\r\n        <TodosContext.Provider value={{todos, getCurrentTodos}}>\r\n            <Addtodo userId={userId} />\r\n            <Stack spacing={4} mt={1}>\r\n                {todos.map((element) => (\r\n                    <Todo id={element.id} item={element.item} userId={userId} />\r\n                ))}\r\n            </Stack>\r\n        </TodosContext.Provider>\r\n    )\r\n}\r\n\r\nexport default Todos","H:\\Computer Science\\Side Project\\todo-list\\v2.0\\frontend\\src\\components\\Footer.jsx",[],[],"H:\\Computer Science\\Side Project\\todo-list\\v2.0\\frontend\\src\\components\\SignUp.jsx",["65"],[],"H:\\Computer Science\\Side Project\\todo-list\\v2.0\\frontend\\src\\components\\Header.jsx",[],[],{"ruleId":"66","severity":1,"message":"67","line":3,"column":50,"nodeType":"68","messageId":"69","endLine":3,"endColumn":54},{"ruleId":"66","severity":1,"message":"70","line":2,"column":38,"nodeType":"68","messageId":"69","endLine":2,"endColumn":43},{"ruleId":"66","severity":1,"message":"71","line":2,"column":45,"nodeType":"68","messageId":"69","endLine":2,"endColumn":49},{"ruleId":"66","severity":1,"message":"72","line":2,"column":51,"nodeType":"68","messageId":"69","endLine":2,"endColumn":57},{"ruleId":"66","severity":1,"message":"73","line":5,"column":13,"nodeType":"68","messageId":"69","endLine":5,"endColumn":22},{"ruleId":"66","severity":1,"message":"74","line":5,"column":24,"nodeType":"68","messageId":"69","endLine":5,"endColumn":39},{"ruleId":"66","severity":1,"message":"74","line":17,"column":24,"nodeType":"68","messageId":"69","endLine":17,"endColumn":39},{"ruleId":"66","severity":1,"message":"75","line":2,"column":123,"nodeType":"68","messageId":"69","endLine":2,"endColumn":139},{"ruleId":"66","severity":1,"message":"76","line":5,"column":10,"nodeType":"68","messageId":"69","endLine":5,"endColumn":21},{"ruleId":"66","severity":1,"message":"77","line":13,"column":20,"nodeType":"68","messageId":"69","endLine":13,"endColumn":29},{"ruleId":"66","severity":1,"message":"78","line":16,"column":12,"nodeType":"68","messageId":"69","endLine":16,"endColumn":17},{"ruleId":"66","severity":1,"message":"77","line":75,"column":20,"nodeType":"68","messageId":"69","endLine":75,"endColumn":29},{"ruleId":"66","severity":1,"message":"78","line":76,"column":12,"nodeType":"68","messageId":"69","endLine":76,"endColumn":17},{"ruleId":"66","severity":1,"message":"77","line":150,"column":20,"nodeType":"68","messageId":"69","endLine":150,"endColumn":29},{"ruleId":"79","severity":1,"message":"80","line":160,"column":8,"nodeType":"81","endLine":160,"endColumn":10,"suggestions":"82"},{"ruleId":"66","severity":1,"message":"74","line":19,"column":24,"nodeType":"68","messageId":"69","endLine":19,"endColumn":39},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'Stack' is defined but never used.","'Text' is defined but never used.","'Switch' is defined but never used.","'colorMode' is assigned a value but never used.","'toggleColorMode' is assigned a value but never used.","'FormErrorMessage' is defined but never used.","'useNavigate' is defined but never used.","'setUserId' is assigned a value but never used.","'todos' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getCurrentTodos'. Either include it or remove the dependency array.","ArrayExpression",["83"],{"desc":"84","fix":"85"},"Update the dependencies array to be: [getCurrentTodos]",{"range":"86","text":"87"},[5192,5194],"[getCurrentTodos]"]