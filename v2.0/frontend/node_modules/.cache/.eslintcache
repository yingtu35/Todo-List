[{"H:\\Computer Science\\Side Project\\todo-list\\v2.0\\frontend\\src\\index.js":"1","H:\\Computer Science\\Side Project\\todo-list\\v2.0\\frontend\\src\\reportWebVitals.js":"2","H:\\Computer Science\\Side Project\\todo-list\\v2.0\\frontend\\src\\App.js":"3","H:\\Computer Science\\Side Project\\todo-list\\v2.0\\frontend\\src\\components\\HomePage.jsx":"4","H:\\Computer Science\\Side Project\\todo-list\\v2.0\\frontend\\src\\components\\Todos.jsx":"5","H:\\Computer Science\\Side Project\\todo-list\\v2.0\\frontend\\src\\components\\Footer.jsx":"6","H:\\Computer Science\\Side Project\\todo-list\\v2.0\\frontend\\src\\components\\SignUp.jsx":"7","H:\\Computer Science\\Side Project\\todo-list\\v2.0\\frontend\\src\\components\\Header.jsx":"8"},{"size":826,"mtime":1675696366000,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":1674906308000,"results":"11","hashOfConfig":"10"},{"size":1390,"mtime":1675950158000,"results":"12","hashOfConfig":"10"},{"size":4931,"mtime":1675997122000,"results":"13","hashOfConfig":"10"},{"size":5594,"mtime":1675434770000,"results":"14","hashOfConfig":"10"},{"size":1674,"mtime":1675694646000,"results":"15","hashOfConfig":"10"},{"size":5223,"mtime":1675997246000,"results":"16","hashOfConfig":"10"},{"size":3477,"mtime":1675843268000,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"3dq7m6",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"21"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"21"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"21"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"H:\\Computer Science\\Side Project\\todo-list\\v2.0\\frontend\\src\\index.js",[],[],[],"H:\\Computer Science\\Side Project\\todo-list\\v2.0\\frontend\\src\\reportWebVitals.js",[],[],"H:\\Computer Science\\Side Project\\todo-list\\v2.0\\frontend\\src\\App.js",["48"],[],"import './App.css';\nimport React, { useState } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Link, Navigate} from \"react-router-dom\";\nimport Header from './components/Header'\nimport Footer from './components/Footer';\nimport HomePage from './components/HomePage';\nimport SignUp from './components/SignUp';\nimport { Box } from \"@chakra-ui/react\"\nimport Todos from './components/Todos';\n\n\nfunction App() {\n  const [username, setUsername] = useState('');\n  const [userId, setUserId] = useState('');\n\n  function loginCallback(data) {\n    setUserId(data.user_id);\n    setUsername(data.username);\n  }\n\n  function logOutCallback() {\n    setUserId(\"\");\n    setUsername(\"\");\n  }\n\n  function signUpCallback(data) {\n    setUserId(data.user_id);\n    setUsername(data.username);\n  }\n\n  return (\n    <Box>\n      <Router>\n        <Header username={username} logOutCallback={logOutCallback}/>\n        <Routes>\n          <Route path=\"/\" element={userId ? <Todos userId={userId} /> : <HomePage loginCallback={loginCallback} />}/>\n          <Route path=\"/login\" element={userId ? <Todos userId={userId} /> : <HomePage loginCallback={loginCallback} />}/>\n          <Route path=\"/signup\" element={<SignUp signUpCallback={signUpCallback}/>}/>\n          <Route path=\"*\" element={<Navigate to={\"/\"} />} />\n        </Routes>\n      </Router>\n      <Footer />\n    </Box>\n    );\n}\n\nexport default App;\n","H:\\Computer Science\\Side Project\\todo-list\\v2.0\\frontend\\src\\components\\HomePage.jsx",["49","50","51"],[],"import React, { useState } from \"react\"\r\nimport { Flex, Box, ButtonGroup, Button, Input, Stack, useColorMode, Heading, Collapse, Alert, AlertDescription } from \"@chakra-ui/react\"\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { FormControl, FormLabel, FormHelperText } from \"@chakra-ui/react\";\r\n\r\nfunction HomePage(props) {\r\n    const navigate = useNavigate();\r\n\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [usernameError, setUsernameError] = useState(false);\r\n    const [passwordError, setPasswordError] = useState(false);\r\n\r\n    const [loginError, setLoginError] = useState(false);\r\n    const [loginMsg, setLoginMsg] = useState(\"\");\r\n\r\n    const { colorMode, toggleColorMode } = useColorMode();\r\n    const boxBg = { light: \"gray.100\", dark: \"gray.400\"}\r\n    const inputBg = { light: \"gray.200\", dark: \"gray.600\" };\r\n\r\n    async function handleLogin(){\r\n        if (username === \"\") {\r\n            setUsernameError(true);\r\n            return;\r\n        }\r\n        if (password === \"\") {\r\n            setPasswordError(true);\r\n            return;\r\n        }\r\n\r\n        const data = {\r\n            gran_type: \"password\",\r\n            username: username,\r\n            password: password,\r\n        }\r\n        const requestOptions = {\r\n            method: \"POST\",\r\n            headers: {\"Content-Type\": \"application/x-www-form-urlencoded\"},\r\n            body: new URLSearchParams(data).toString(),\r\n        }\r\n        \r\n        const response = await fetch(\"http://localhost:8000/login\", requestOptions);\r\n        if (response.ok){\r\n            const data = await response.json();\r\n            console.log(data);\r\n            // props.loginCallback(data);\r\n            // navigate(\"/\");\r\n        }else {\r\n            const data = await response.json();\r\n            console.log(data);\r\n            // setLoginError(true);\r\n            // setLoginMsg(data.detail);\r\n        }\r\n\r\n    }\r\n\r\n    function handleSignUp() {\r\n        navigate(\"/signup\");\r\n    }\r\n\r\n    function handleUsernameInput(e){\r\n        setUsername(e.target.value);\r\n        if (username !== \"\"){\r\n            setUsernameError(false);\r\n        }\r\n    }\r\n\r\n    function handlePasswordInput(e){\r\n        setPassword(e.target.value);\r\n        if (password !== \"\"){\r\n            setPasswordError(false);\r\n        }\r\n    }\r\n\r\n    // TODO: Temporary button, delete after test\r\n    async function handleGetUser(){\r\n        const response = await fetch(\"http://localhost:8000/test\")\r\n        const data = await response.json();\r\n        console.log(data);\r\n    }\r\n\r\n    return (\r\n        <Box>\r\n            <Flex align=\"center\" justify=\"center\" h=\"75vh\">\r\n                <Box p={5} borderWidth=\"1px\" w=\"500px\" rounded=\"lg\" bg={boxBg[colorMode]}>\r\n                    <Stack spacing={3}>\r\n                        <Heading as='h3' size='lg'>User Login</Heading>\r\n                        <Collapse in={loginError}>\r\n                            <Alert status=\"error\">\r\n                                <AlertDescription>{loginMsg}</AlertDescription>\r\n                            </Alert>\r\n                        </Collapse>\r\n                        <FormControl>\r\n                            <FormLabel>Username</FormLabel>\r\n                            <Input type='text'\r\n                                   autoFocus \r\n                                   value={username}\r\n                                   placeholder=\"Username\" \r\n                                   bg={inputBg[colorMode]} \r\n                                   onChange={handleUsernameInput} />\r\n                            {!usernameError ? (null) : (<FormHelperText>Username is required.</FormHelperText>)}\r\n                        </FormControl>\r\n                        <FormControl>\r\n                            <FormLabel>Password</FormLabel>\r\n                            <Input type='password' \r\n                                   value={password}\r\n                                   placeholder=\"Password\" \r\n                                   bg={inputBg[colorMode]}  \r\n                                   onChange={handlePasswordInput} />\r\n                            {!passwordError ? (null) : (<FormHelperText>Password is required.</FormHelperText>)}\r\n                        </FormControl>\r\n                        <ButtonGroup justifyContent=\"right\">\r\n                            {/* Temporary getUser Button, should be deleted after test */}\r\n                            <Button onClick={handleGetUser}>GetUser</Button>\r\n                            <Button colorScheme=\"cyan\" \r\n                                    onClick={handleLogin}>Login</Button>\r\n                            <Button colorScheme=\"green\" onClick={handleSignUp}>Sign up</Button>\r\n                        </ButtonGroup>\r\n                    </Stack>       \r\n                </Box>\r\n            </Flex>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default HomePage","H:\\Computer Science\\Side Project\\todo-list\\v2.0\\frontend\\src\\components\\Todos.jsx",["52","53","54","55","56","57","58","59"],[],"import React, { useRef } from \"react\"\r\nimport { Box, Input, Button, InputGroup, Stack, Text, ButtonGroup, useDisclosure, FormControl, FormLabel, FormHelperText, FormErrorMessage } from \"@chakra-ui/react\"\r\nimport { Modal, ModalOverlay, ModalHeader, ModalCloseButton, ModalContent, ModalBody, ModalFooter} from \"@chakra-ui/react\"\r\nimport { useState, useEffect } from \"react\"\r\nimport { useNavigate } from \"react-router-dom\"\r\n\r\nconst TodosContext = React.createContext({\r\n    todos: [],\r\n    getCurrentTodos: () => {}\r\n})\r\n\r\nfunction Addtodo(props) {\r\n    const [userId, setUserId] = useState(props.userId || null);\r\n    const [item, setItem] = useState(\"\")\r\n    const [isError, setIsError] = useState(false);\r\n    const {todos, getCurrentTodos} = React.useContext(TodosContext)\r\n\r\n    function handleInput(event) {\r\n        setItem(event.target.value);\r\n        setIsError(false);\r\n    }\r\n    async function handleSubmit() {\r\n        if (item) {\r\n            const requestOptions = {\r\n                method: \"POST\",\r\n                headers: {\"Content-Type\": \"application/json\"},\r\n                body: JSON.stringify({\r\n                    \"item\": item,\r\n                    \"owner_id\": userId,\r\n                }),\r\n            }\r\n\r\n            await fetch(`http://localhost:8000/items/user/${userId}`, requestOptions);\r\n            getCurrentTodos();\r\n            setItem(\"\");\r\n        }\r\n        else {\r\n            setIsError(true);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <FormControl>\r\n            <FormLabel>Todo</FormLabel>\r\n            <InputGroup>\r\n                <Input \r\n                    type=\"text\"\r\n                    placeholder=\"Enter here\"\r\n                    value={item}\r\n                    autoFocus={true}\r\n                    onChange={handleInput}\r\n                />\r\n                <Button colorScheme=\"blue\" onClick={handleSubmit}>Submit</Button>\r\n            </InputGroup>\r\n            {isError? (\r\n                <FormHelperText>\r\n                    Input is required.\r\n                </FormHelperText>\r\n            )\r\n            : (\r\n                <FormHelperText>\r\n                    Write down what to do.\r\n                </FormHelperText>\r\n            )\r\n            }\r\n            \r\n        </FormControl>\r\n            \r\n    )\r\n}\r\n\r\nfunction Todo(props){\r\n    const [id, setId] = useState(props.id || null);\r\n    const [item, setItem] = useState(props.item || null);\r\n    const [userId, setUserId] = useState(props.userId || null);\r\n    const {todos, getCurrentTodos} = React.useContext(TodosContext);\r\n    const { isOpen, onOpen, onClose } = useDisclosure();\r\n    const inputRef = useRef();\r\n\r\n    async function handleUpdate(){\r\n        if (inputRef.current.value) {\r\n            const requestOptions = {\r\n                method: \"PUT\",\r\n                headers: {\"Content-Type\": \"application/json\"},\r\n                body: JSON.stringify({\r\n                    \"item\": inputRef.current.value,\r\n                    \"owner_id\": userId\r\n                }),\r\n            }\r\n\r\n            await fetch(`http://localhost:8000/items/${id}`, requestOptions);\r\n            getCurrentTodos();\r\n            onClose();\r\n        }\r\n    }\r\n\r\n    async function handleDelete(){\r\n        const requestOptions = {\r\n            method: \"DELETE\",\r\n            headers: {\"Content-Type\": \"application/json\"},\r\n            body: JSON.stringify({\r\n                \"owner_id\": userId\r\n            }),\r\n        }\r\n\r\n        await fetch(`http://localhost:8000/items/${id}`, requestOptions);\r\n        getCurrentTodos();\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        setId(props.id);\r\n        setItem(props.item);\r\n    }, [props.id, props.item])\r\n\r\n    return (\r\n        <Box p={1}>\r\n            <Text fontSize='md'>{item}</Text>\r\n            <ButtonGroup gap={4}>\r\n                <Button colorScheme='blue' size='sm' onClick={onOpen}>Edit</Button>\r\n                <Button colorScheme='red' size='sm' onClick={handleDelete}>Delete</Button>\r\n            </ButtonGroup>\r\n\r\n            <Modal isOpen={isOpen} onClose={onClose}>\r\n                <ModalOverlay />\r\n                <ModalContent>\r\n                    <ModalHeader>Update Todo Item</ModalHeader>\r\n                    <ModalCloseButton />\r\n                    <ModalBody>\r\n                        <Input \r\n                            placeholder=\"Enter here\"\r\n                            defaultValue={item}\r\n                            ref={inputRef}\r\n                            autoFocus={true}\r\n                        />\r\n                    </ModalBody>\r\n\r\n                    <ModalFooter>\r\n                        <Button colorScheme=\"blue\" onClick={handleUpdate}>Update</Button>\r\n                    </ModalFooter>\r\n                </ModalContent>\r\n            </Modal>\r\n        </Box>\r\n    )\r\n}\r\n\r\nfunction Todos(props){\r\n\r\n    const [todos, setTodos] = useState([]);\r\n    const [userId, setUserId] = useState(props.userId || -1);\r\n\r\n    async function getCurrentTodos() {\r\n        const response = await fetch(`http://localhost:8000/items/user/${userId}`);\r\n        const data = await response.json();\r\n        setTodos(data.todos);\r\n    }\r\n\r\n    useEffect(() => {\r\n      getCurrentTodos()\r\n    }, [])\r\n\r\n    return (\r\n        <TodosContext.Provider value={{todos, getCurrentTodos}}>\r\n            <Addtodo userId={userId} />\r\n            <Stack spacing={4} mt={1}>\r\n                {todos.map((element) => (\r\n                    <Todo id={element.id} item={element.item} userId={userId} />\r\n                ))}\r\n            </Stack>\r\n        </TodosContext.Provider>\r\n    )\r\n}\r\n\r\nexport default Todos","H:\\Computer Science\\Side Project\\todo-list\\v2.0\\frontend\\src\\components\\Footer.jsx",["60"],[],"import React from \"react\"\r\nimport {FaGithub, FaFacebook, FaLinkedin, FaInstagram} from \"react-icons/fa\"\r\nimport { Box, Text, Button, useColorMode } from \"@chakra-ui/react\"\r\n\r\nfunction Footer() {\r\n\r\n    const { colorMode, toggleColorMode } = useColorMode();\r\n    const boxBg = { light: \"gray.400\", dark: \"gray.600\"};\r\n    return (\r\n        <Box \r\n            position=\"fixed\"\r\n            bottom={0}\r\n            left={0}\r\n            width=\"100%\"\r\n            bg={boxBg[colorMode]}\r\n            p={4}\r\n            textAlign=\"center\"\r\n        >\r\n            <Text>Copyright © 2023 Ying Tu. All rights reserved</Text>\r\n            <Button variant=\"ghost\"\r\n                    as=\"a\"\r\n                    href=\"https://github.com/yingtu35\">\r\n                <FaGithub size=\"24px\" />\r\n            </Button>\r\n            <Button colorScheme=\"linkedin\"\r\n                    variant=\"ghost\"\r\n                    as=\"a\"\r\n                    href=\"https://www.linkedin.com/in/ying-tu-06b208102/\"\r\n                    >\r\n                <FaLinkedin size=\"24px\" />\r\n            </Button>\r\n            <Button colorScheme=\"facebook\"\r\n                    variant=\"ghost\"\r\n                    as=\"a\"\r\n                    href=\"https://www.facebook.com/profile.php?id=100000582214483\"\r\n                    >\r\n                <FaFacebook size=\"24px\" />\r\n            </Button>\r\n            <Button colorScheme=\"pink\"\r\n                    variant=\"ghost\"\r\n                    as=\"a\"\r\n                    href=\"https://www.instagram.com/orevo860305/\"\r\n                    >\r\n                <FaInstagram size=\"24px\" />\r\n            </Button>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Footer","H:\\Computer Science\\Side Project\\todo-list\\v2.0\\frontend\\src\\components\\SignUp.jsx",["61","62"],[],"import React, { useState } from \"react\"\r\nimport { Flex, Box, Heading, ButtonGroup, Button, Input, Stack, useColorMode, Collapse, Alert, AlertDescription } from \"@chakra-ui/react\"\r\nimport { FormControl, FormLabel, FormHelperText } from \"@chakra-ui/react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nfunction SignUp(props) {\r\n    const navigate = useNavigate();\r\n\r\n    const [username, setUsername] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [usernameError, setUsernameError] = useState(false);\r\n    const [emailError, setEmailError] = useState(false);\r\n    const [passwordError, setPasswordError] = useState(false);\r\n\r\n    const [signupError, setSignupError] = useState(false);\r\n    const [signupMsg, setSignupMsg] = useState('');\r\n    \r\n    const { colorMode, toggleColorMode } = useColorMode();\r\n    const boxBg = { light: \"gray.100\", dark: \"gray.400\"};\r\n    const inputBg = { light: \"gray.200\", dark: \"gray.600\" };\r\n\r\n    async function handleSignUp() {\r\n        if (username === \"\" || email === \"\" || password === \"\"){\r\n            if (username === \"\") {\r\n                setUsernameError(true);\r\n            }\r\n            if (email === \"\") {\r\n                setEmailError(true);\r\n            }\r\n            if (password === \"\") {\r\n                setPasswordError(true);\r\n            }\r\n            return;\r\n        }\r\n\r\n        const requestOptions = {\r\n            method: \"POST\",\r\n            headers: {\"Content-Type\": \"application/json\"},\r\n            body: JSON.stringify({\r\n                \"username\": username,\r\n                \"email\": email,\r\n                \"password\": password,\r\n            }),\r\n        }\r\n        \r\n        const response = await fetch(\"http://localhost:8000/Sign-up\", requestOptions);\r\n        if (response.ok){\r\n            const data = await response.json();\r\n            // props.signUpCallback(data);\r\n            // navigate(\"/\");\r\n        }else {\r\n            const data = await response.json();\r\n            setSignupError(true);\r\n            setSignupMsg(data.detail);\r\n        }\r\n        return;\r\n    }\r\n\r\n    function handleBack() {\r\n        navigate(\"/\");\r\n    }\r\n\r\n    function handleUsernameInput(e) {\r\n        setUsername(e.target.value);\r\n        if (usernameError && username !== \"\"){\r\n            setUsernameError(false);\r\n        }\r\n\r\n    }\r\n\r\n    function handleEmailInput(e){\r\n        setEmail(e.target.value);\r\n        if (emailError && email !== \"\"){\r\n            setEmailError(false);\r\n        }\r\n    }\r\n\r\n    function handlePasswordInput(e){\r\n        setPassword(e.target.value);\r\n        if (passwordError && password !== \"\"){\r\n            setPasswordError(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Flex align=\"center\" justify=\"center\" h=\"80vh\">\r\n            <Box p={5} borderWidth=\"1px\" w=\"500px\" rounded=\"lg\" bg={boxBg[colorMode]}>\r\n                <Stack spacing={3}>\r\n                    <Heading as='h3' size='lg'>User Sign Up</Heading>\r\n                    <Collapse in={signupError}>\r\n                        <Alert status=\"error\">\r\n                            <AlertDescription>{signupMsg}</AlertDescription>\r\n                        </Alert>\r\n                    </Collapse>\r\n                    <FormControl>\r\n                        <FormLabel>Email</FormLabel>\r\n                        <Input type='email' \r\n                                value={email}\r\n                                placeholder=\"Email\" \r\n                                bg={inputBg[colorMode]} \r\n                                onChange={handleEmailInput} />\r\n                        {!emailError ? (null) : (<FormHelperText>Email is required.</FormHelperText>)}\r\n                    </FormControl>\r\n                    <FormControl>\r\n                        <FormLabel>Username</FormLabel>\r\n                        <Input type='text' \r\n                                value={username}\r\n                                placeholder=\"Username\" \r\n                                bg={inputBg[colorMode]} \r\n                                onChange={handleUsernameInput} />\r\n                        {!usernameError ? (null) : (<FormHelperText>Username is required.</FormHelperText>)}\r\n                    </FormControl>\r\n                    <FormControl>\r\n                        <FormLabel>Password</FormLabel>\r\n                        <Input type='password' \r\n                                value={password}\r\n                                placeholder=\"Password\" \r\n                                bg={inputBg[colorMode]}  \r\n                                onChange={handlePasswordInput} />\r\n                        {!passwordError ? (null) : (<FormHelperText>Password is required.</FormHelperText>)}\r\n                    </FormControl>\r\n                    <ButtonGroup justifyContent=\"right\">\r\n                        <Button colorScheme=\"green\" \r\n                                onClick={handleSignUp}>Sign up</Button>\r\n                        <Button colorScheme=\"red\"\r\n                                onClick={handleBack}>Back</Button>\r\n                    </ButtonGroup>\r\n                </Stack>       \r\n            </Box>\r\n        </Flex>\r\n    );\r\n}\r\n\r\nexport default SignUp","H:\\Computer Science\\Side Project\\todo-list\\v2.0\\frontend\\src\\components\\Header.jsx",[],[],{"ruleId":"63","severity":1,"message":"64","line":3,"column":50,"nodeType":"65","messageId":"66","endLine":3,"endColumn":54},{"ruleId":"63","severity":1,"message":"67","line":14,"column":24,"nodeType":"65","messageId":"66","endLine":14,"endColumn":37},{"ruleId":"63","severity":1,"message":"68","line":15,"column":22,"nodeType":"65","messageId":"66","endLine":15,"endColumn":33},{"ruleId":"63","severity":1,"message":"69","line":17,"column":24,"nodeType":"65","messageId":"66","endLine":17,"endColumn":39},{"ruleId":"63","severity":1,"message":"70","line":2,"column":123,"nodeType":"65","messageId":"66","endLine":2,"endColumn":139},{"ruleId":"63","severity":1,"message":"71","line":5,"column":10,"nodeType":"65","messageId":"66","endLine":5,"endColumn":21},{"ruleId":"63","severity":1,"message":"72","line":13,"column":20,"nodeType":"65","messageId":"66","endLine":13,"endColumn":29},{"ruleId":"63","severity":1,"message":"73","line":16,"column":12,"nodeType":"65","messageId":"66","endLine":16,"endColumn":17},{"ruleId":"63","severity":1,"message":"72","line":75,"column":20,"nodeType":"65","messageId":"66","endLine":75,"endColumn":29},{"ruleId":"63","severity":1,"message":"73","line":76,"column":12,"nodeType":"65","messageId":"66","endLine":76,"endColumn":17},{"ruleId":"63","severity":1,"message":"72","line":150,"column":20,"nodeType":"65","messageId":"66","endLine":150,"endColumn":29},{"ruleId":"74","severity":1,"message":"75","line":160,"column":8,"nodeType":"76","endLine":160,"endColumn":10,"suggestions":"77"},{"ruleId":"63","severity":1,"message":"69","line":7,"column":24,"nodeType":"65","messageId":"66","endLine":7,"endColumn":39},{"ruleId":"63","severity":1,"message":"69","line":19,"column":24,"nodeType":"65","messageId":"66","endLine":19,"endColumn":39},{"ruleId":"63","severity":1,"message":"78","line":49,"column":19,"nodeType":"65","messageId":"66","endLine":49,"endColumn":23},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'setLoginError' is assigned a value but never used.","'setLoginMsg' is assigned a value but never used.","'toggleColorMode' is assigned a value but never used.","'FormErrorMessage' is defined but never used.","'useNavigate' is defined but never used.","'setUserId' is assigned a value but never used.","'todos' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getCurrentTodos'. Either include it or remove the dependency array.","ArrayExpression",["79"],"'data' is assigned a value but never used.",{"desc":"80","fix":"81"},"Update the dependencies array to be: [getCurrentTodos]",{"range":"82","text":"83"},[5192,5194],"[getCurrentTodos]"]