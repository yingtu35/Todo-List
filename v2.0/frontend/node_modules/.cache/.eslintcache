[{"H:\\Computer Science\\Side Project\\todo-list\\frontend\\src\\index.js":"1","H:\\Computer Science\\Side Project\\todo-list\\frontend\\src\\App.js":"2","H:\\Computer Science\\Side Project\\todo-list\\frontend\\src\\reportWebVitals.js":"3","H:\\Computer Science\\Side Project\\todo-list\\frontend\\src\\components\\Title.jsx":"4","H:\\Computer Science\\Side Project\\todo-list\\frontend\\src\\components\\Todos.jsx":"5","H:\\Computer Science\\Side Project\\todo-list\\frontend\\src\\components\\Footer.jsx":"6","H:\\Computer Science\\Side Project\\todo-list\\frontend\\src\\components\\HomePage.jsx":"7","H:\\Computer Science\\Side Project\\todo-list\\frontend\\src\\components\\SignUp.jsx":"8"},{"size":581,"mtime":1674908780000,"results":"9","hashOfConfig":"10"},{"size":1360,"mtime":1675220456000,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1674906308000,"results":"12","hashOfConfig":"10"},{"size":701,"mtime":1675220188000,"results":"13","hashOfConfig":"10"},{"size":5886,"mtime":1675251606000,"results":"14","hashOfConfig":"10"},{"size":725,"mtime":1675220426000,"results":"15","hashOfConfig":"10"},{"size":3900,"mtime":1675220072000,"results":"16","hashOfConfig":"10"},{"size":4853,"mtime":1675220520000,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"1o6zhoo",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"21"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"21"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"21"},"H:\\Computer Science\\Side Project\\todo-list\\frontend\\src\\index.js",[],[],[],"H:\\Computer Science\\Side Project\\todo-list\\frontend\\src\\App.js",["46"],[],"import './App.css';\nimport React, { useState } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Link, Navigate} from \"react-router-dom\";\nimport Title from './components/Title';\nimport Footer from './components/Footer';\nimport HomePage from './components/HomePage';\nimport SignUp from './components/SignUp';\nimport { Box } from \"@chakra-ui/react\"\nimport Todos from './components/Todos';\n\n\nfunction App() {\n  const [userId, setUserId] = useState('');\n\n  function loginCallback(id) {\n    setUserId(id);\n    // console.log(id);\n  }\n\n  function logOutCallback() {\n    setUserId(\"\");\n  }\n\n  function signUpCallback(id) {\n    setUserId(id);\n  }\n\n  return (\n    <Box>\n      {/* TODO: Create a Header page that includes user information, login, logout button */}\n      <Title />\n      <Router>\n        <Routes>\n          <Route path=\"/\" element={userId ? <Todos userId={userId} logOutCallback={logOutCallback} /> : <HomePage loginCallback={loginCallback} />}/>\n          <Route path=\"/login\" element={userId ? <Todos userId={userId} logOutCallback={logOutCallback} /> : <HomePage loginCallback={loginCallback} />}/>\n          <Route path=\"/signup\" element={<SignUp signUpCallback={signUpCallback}/>}/>\n          <Route path=\"*\" element={<Navigate to={\"/\"} />} />\n        </Routes>\n      </Router>\n      <Footer />\n    </Box>\n    );\n}\n\nexport default App;\n","H:\\Computer Science\\Side Project\\todo-list\\frontend\\src\\reportWebVitals.js",[],[],"H:\\Computer Science\\Side Project\\todo-list\\frontend\\src\\components\\Title.jsx",[],[],"H:\\Computer Science\\Side Project\\todo-list\\frontend\\src\\components\\Todos.jsx",["47","48","49","50","51","52","53"],[],"H:\\Computer Science\\Side Project\\todo-list\\frontend\\src\\components\\Footer.jsx",[],[],"H:\\Computer Science\\Side Project\\todo-list\\frontend\\src\\components\\HomePage.jsx",["54"],[],"import React, { useState } from \"react\"\r\nimport { Flex, Box, ButtonGroup, Button, Input, Stack, useColorMode, Heading } from \"@chakra-ui/react\"\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { FormControl, FormLabel, FormHelperText } from \"@chakra-ui/react\";\r\n\r\nfunction HomePage(props) {\r\n    const navigate = useNavigate();\r\n\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [emailError, setEmailError] = useState(false);\r\n    const [passwordError, setPasswordError] = useState(false);\r\n\r\n    const { colorMode, toggleColorMode } = useColorMode();\r\n    const boxBg = { light: \"gray.100\", dark: \"gray.400\"}\r\n    const inputBg = { light: \"gray.200\", dark: \"gray.600\" };\r\n\r\n    async function handleLogin(){\r\n        if (email === \"\") {\r\n            setEmailError(true);\r\n            return;\r\n        }\r\n        if (password === \"\") {\r\n            setPasswordError(true);\r\n            return;\r\n        }\r\n\r\n        const requestOptions = {\r\n            method: \"POST\",\r\n            headers: {\"Content-Type\": \"application/json\"},\r\n            body: JSON.stringify({\r\n                \"email\": email,\r\n                \"password\": password,\r\n            }),\r\n        }\r\n        \r\n        const response = await fetch(\"http://localhost:8000/user/login\", requestOptions);\r\n        if (response.ok){\r\n            const data = await response.json();\r\n            props.loginCallback(data.user_id);\r\n            navigate(\"/\");\r\n        }else {\r\n            // TODO: Display error message to the screen\r\n            const data = await response.json();\r\n            console.log(data.detail);\r\n        }\r\n\r\n    }\r\n\r\n    function handleSignUp() {\r\n        navigate(\"/signup\");\r\n    }\r\n\r\n    function handleEmailInput(e){\r\n        setEmail(e.target.value);\r\n        if (email !== \"\"){\r\n            setEmailError(false);\r\n        }\r\n    }\r\n\r\n    function handlePasswordInput(e){\r\n        setPassword(e.target.value);\r\n        if (password !== \"\"){\r\n            setPasswordError(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Box>\r\n            <Flex align=\"center\" justify=\"center\" h=\"80vh\">\r\n                <Box p={5} borderWidth=\"1px\" w=\"500px\" rounded=\"lg\" bg={boxBg[colorMode]}>\r\n                    <Stack spacing={3}>\r\n                        <Heading as='h3' size='lg'>User Login</Heading>\r\n                        <FormControl>\r\n                            <FormLabel>Email</FormLabel>\r\n                            <Input type='email' \r\n                                   value={email}\r\n                                   placeholder=\"Email\" \r\n                                   bg={inputBg[colorMode]} \r\n                                   onChange={handleEmailInput} />\r\n                            {!emailError ? (null) : (<FormHelperText>Email is required.</FormHelperText>)}\r\n                        </FormControl>\r\n                        <FormControl>\r\n                            <FormLabel>Password</FormLabel>\r\n                            <Input type='password' \r\n                                   value={password}\r\n                                   placeholder=\"Password\" \r\n                                   bg={inputBg[colorMode]}  \r\n                                   onChange={handlePasswordInput} />\r\n                            {!passwordError ? (null) : (<FormHelperText>Password is required.</FormHelperText>)}\r\n                        </FormControl>\r\n                        <ButtonGroup justifyContent=\"right\">\r\n                            <Button colorScheme=\"cyan\" \r\n                                    onClick={handleLogin}>Login</Button>\r\n                            <Button colorScheme=\"green\" onClick={handleSignUp}>Sign up</Button>\r\n                        </ButtonGroup>\r\n                    </Stack>       \r\n                </Box>\r\n            </Flex>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default HomePage","H:\\Computer Science\\Side Project\\todo-list\\frontend\\src\\components\\SignUp.jsx",["55"],[],"import React, { useState } from \"react\"\r\nimport { Flex, Box, Heading, ButtonGroup, Button, Input, Stack, useColorMode } from \"@chakra-ui/react\"\r\nimport { FormControl, FormLabel, FormHelperText } from \"@chakra-ui/react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nfunction SignUp(props) {\r\n    const navigate = useNavigate();\r\n\r\n    const [username, setUsername] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [usernameError, setUsernameError] = useState(false);\r\n    const [emailError, setEmailError] = useState(false);\r\n    const [passwordError, setPasswordError] = useState(false);\r\n    \r\n    const { colorMode, toggleColorMode } = useColorMode();\r\n    const boxBg = { light: \"gray.100\", dark: \"gray.400\"};\r\n    const inputBg = { light: \"gray.200\", dark: \"gray.600\" };\r\n\r\n    async function handleSignUp() {\r\n        // TODO: send a post request to create new user\r\n        if (email === \"\") {\r\n            setEmailError(true);\r\n            return;\r\n        }\r\n        if (password === \"\") {\r\n            setPasswordError(true);\r\n            return;\r\n        }\r\n\r\n        const requestOptions = {\r\n            method: \"POST\",\r\n            headers: {\"Content-Type\": \"application/json\"},\r\n            body: JSON.stringify({\r\n                \"email\": email,\r\n                \"password\": password,\r\n            }),\r\n        }\r\n        \r\n        const response = await fetch(\"http://localhost:8000/user/create\", requestOptions);\r\n        if (response.ok){\r\n            const data = await response.json();\r\n            // // TODO: navigate to \"/\" send a callback to set userId\r\n            // setUserId(data.user_id);\r\n            // setIsLogin(true);\r\n            props.signUpCallback(data.user_id);\r\n            navigate(\"/\");\r\n        }else {\r\n            // TODO: Display error information to the user\r\n            const data = await response.json();\r\n            console.log(data.detail);\r\n        }\r\n        return;\r\n    }\r\n\r\n    function handleBack() {\r\n        navigate(\"/\");\r\n    }\r\n\r\n    function handleUsernameInput(e) {\r\n        setUsername(e.target.value);\r\n        if (usernameError && username !== \"\"){\r\n            setUsernameError(false);\r\n        }\r\n\r\n    }\r\n\r\n    function handleEmailInput(e){\r\n        setEmail(e.target.value);\r\n        if (emailError && email !== \"\"){\r\n            setEmailError(false);\r\n        }\r\n    }\r\n\r\n    function handlePasswordInput(e){\r\n        setPassword(e.target.value);\r\n        if (passwordError && password !== \"\"){\r\n            setPasswordError(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Flex align=\"center\" justify=\"center\" h=\"80vh\">\r\n            <Box p={5} borderWidth=\"1px\" w=\"500px\" rounded=\"lg\" bg={boxBg[colorMode]}>\r\n                <Stack spacing={3}>\r\n                    <Heading as='h3' size='lg'>User Sign Up</Heading>\r\n                    <FormControl>\r\n                        <FormLabel>Username</FormLabel>\r\n                        <Input type='text' \r\n                                value={username}\r\n                                placeholder=\"Username\" \r\n                                bg={inputBg[colorMode]} \r\n                                onChange={handleUsernameInput} />\r\n                        {!usernameError ? (null) : (<FormHelperText>Username is required.</FormHelperText>)}\r\n                    </FormControl>\r\n                    <FormControl>\r\n                        <FormLabel>Email</FormLabel>\r\n                        <Input type='email' \r\n                                value={email}\r\n                                placeholder=\"Email\" \r\n                                bg={inputBg[colorMode]} \r\n                                onChange={handleEmailInput} />\r\n                        {!emailError ? (null) : (<FormHelperText>Email is required.</FormHelperText>)}\r\n                    </FormControl>\r\n                    <FormControl>\r\n                        <FormLabel>Password</FormLabel>\r\n                        <Input type='password' \r\n                                value={password}\r\n                                placeholder=\"Password\" \r\n                                bg={inputBg[colorMode]}  \r\n                                onChange={handlePasswordInput} />\r\n                        {!passwordError ? (null) : (<FormHelperText>Password is required.</FormHelperText>)}\r\n                    </FormControl>\r\n                    <ButtonGroup justifyContent=\"right\">\r\n                        <Button colorScheme=\"green\" \r\n                                onClick={handleSignUp}>Sign up</Button>\r\n                        <Button colorScheme=\"red\"\r\n                                onClick={handleBack}>Back</Button>\r\n                    </ButtonGroup>\r\n                </Stack>       \r\n            </Box>\r\n        </Flex>\r\n    );\r\n}\r\n\r\nexport default SignUp",{"ruleId":"56","severity":1,"message":"57","line":3,"column":50,"nodeType":"58","messageId":"59","endLine":3,"endColumn":54},{"ruleId":"56","severity":1,"message":"60","line":2,"column":123,"nodeType":"58","messageId":"59","endLine":2,"endColumn":139},{"ruleId":"56","severity":1,"message":"61","line":13,"column":20,"nodeType":"58","messageId":"59","endLine":13,"endColumn":29},{"ruleId":"56","severity":1,"message":"62","line":16,"column":12,"nodeType":"58","messageId":"59","endLine":16,"endColumn":17},{"ruleId":"56","severity":1,"message":"61","line":75,"column":20,"nodeType":"58","messageId":"59","endLine":75,"endColumn":29},{"ruleId":"56","severity":1,"message":"62","line":76,"column":12,"nodeType":"58","messageId":"59","endLine":76,"endColumn":17},{"ruleId":"56","severity":1,"message":"61","line":151,"column":20,"nodeType":"58","messageId":"59","endLine":151,"endColumn":29},{"ruleId":"63","severity":1,"message":"64","line":166,"column":8,"nodeType":"65","endLine":166,"endColumn":10,"suggestions":"66"},{"ruleId":"56","severity":1,"message":"67","line":14,"column":24,"nodeType":"58","messageId":"59","endLine":14,"endColumn":39},{"ruleId":"56","severity":1,"message":"67","line":16,"column":24,"nodeType":"58","messageId":"59","endLine":16,"endColumn":39},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'FormErrorMessage' is defined but never used.","'setUserId' is assigned a value but never used.","'todos' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getCurrentTodos'. Either include it or remove the dependency array.","ArrayExpression",["68"],"'toggleColorMode' is assigned a value but never used.",{"desc":"69","fix":"70"},"Update the dependencies array to be: [getCurrentTodos]",{"range":"71","text":"72"},[5307,5309],"[getCurrentTodos]"]